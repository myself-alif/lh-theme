const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const entry = require('webpack-glob-entry');
const IgnoreEmitPlugin = require('ignore-emit-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const path = require('path');
const TerserPlugin = require('terser-webpack-plugin');
const ESLintPlugin = require('eslint-webpack-plugin');
const StylelintPlugin = require('stylelint-webpack-plugin');

module.exports = {
    externals: {
        jquery: 'jQuery',
    },

    entry: entry(
        /**
         * Because most SCSS files and JS files have the same name, that causes a problem with the paths generated by entry() function.
         * In order to solve that, we set the extension as prefix fot he file name.
         * This is a temporary solution. We'll revise it later.
         */
        (filePath) =>
            (path.extname(filePath) === '.scss'
                ? '../css'
                : '../' + path.extname(filePath).substr(1)) +
            (filePath.split('/')[1] === 'blocks' ? '/blocks' : '') +
            (filePath.split('/')[4] === 'plugins' ? '/plugins' : '') +
            '/' +
            path.basename(filePath).split('.').shift(),
        './assets/build/js/*.js',
        './assets/build/css/*.scss',
        './blocks/*/*.js',
        './blocks/*/*.scss',
        './assets/build/js/plugins/*.js'
    ),

    output: {
        filename: './assets/dist/js/[name].min.js',
        path: path.resolve(__dirname),
    },

    module: {
        rules: [
            {
                test: /\.(sass|scss)$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    {
                        loader: 'css-loader',
                        options: { url: false },
                    },
                    {
                        loader: 'sass-loader',
                        options: {
                            implementation: require('sass'),
                        },
                    },
                ],
            },
            {
                test: /\.(png|woff|woff2|eot|ttf|otf|svg)$/,
                use: [{ loader: 'url-loader', options: { limit: 100000 } }],
            },
        ],
    },

    plugins: [
        new ESLintPlugin(),
        new StylelintPlugin({
            configFile: '.stylelintrc',
            context: path.resolve(__dirname),
            files: ['**/*.scss'],
            extensions: ['scss'],
            exclude: ['node_modules', 'assets/build/plugins'],
            failOnError: false,
            quiet: false,
        }),
        new MiniCssExtractPlugin({
            filename: './assets/dist/css/[name].min.css',
        }),

        new CssMinimizerPlugin(),

        new CleanWebpackPlugin({
            cleanOnceBeforeBuildPatterns: ['./assets/dist/*'],
        }),

        new CopyPlugin({
            patterns: [
                {
                    from: './assets/build/img/',
                    to: './assets/dist/img/',
                    noErrorOnMissing: true,
                },
                {
                    from: './assets/build/fonts/',
                    to: './assets/dist/fonts/',
                    noErrorOnMissing: true,
                },
                {
                    from: './assets/build/plugins/',
                    to: './assets/dist/plugins/',
                    noErrorOnMissing: true,
                },
            ],
        }),
    ],

    optimization: {
        minimizer: [
            new TerserPlugin({
                parallel: true,
                terserOptions: {
                    keep_classnames: true,
                    keep_fnames: true,
                },
            }),

            new CssMinimizerPlugin(),

            /** This is used to don't create JS files for SCSS files. */
            new IgnoreEmitPlugin(/^\.\/assets\/dist\/js\/..\/css.*\.js$/),
        ],
    },

    performance: {
        assetFilter: function (assetFilename) {
            return !assetFilename.includes('assets/dist/plugins/');
        }
    }
};
