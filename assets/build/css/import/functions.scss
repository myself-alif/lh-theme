/**
 * This function divides the size given by the value set for the base font size and returns it as rem.
 * 
 * @parameter Number $size
 * 
 * @return Rem
 */

@function px-to-rem($size) {
    @return #{calc($size / $base-font-size)}rem;
}

/**
 * This function is an alias for the px-to-rem() function.
 * 
 * @parameter Number $size
 * 
 * @return Rem
 */

@function p2r($size) {
    @return px-to-rem($size);
}

/**
 * Adds a growing underline to a before/after, could be applied to an empty div?
 * 
 * @parameter Px     $starting-width
 * @parameter Px     $height
 * @parameter Colour $line-color
 * @parameter Colour $bg-color
 * 
 * @return CSS
 */

@mixin growing-underline($starting-width, $height, $line-color, $bg-color) {
    display: block;
    position: absolute;
    height: $height;
    width: 100%;
    left: 0;
    content: "";
    bottom: 0;
    background-image: linear-gradient($line-color, $line-color), linear-gradient($bg-color, $bg-color);
    background-size: $starting-width 3px, auto;
    background-repeat: no-repeat;
    background-position: center bottom;
    transition: all 0.3s ease 0;
}

/**
 * Change placeholder color - vendor prefix edition, probably no longer needed
 * 
 * @parameter Colour $color
 * 
 * @return CSS
 */

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder { /* WebKit browsers */
            color: $color;
    }

    &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
            color: $color;
            opacity: 1;
    }

    &::-moz-placeholder { /* Mozilla Firefox 19+ */
            color: $color;
            opacity: 1;
    }

    &:-ms-input-placeholder { /* Internet Explorer 10+ */
            color: $color;
    }

    &::placeholder {
        color: $color;
    }
}

/**
 * 16:9 = 0.5625
 * requires markup inner div contains the video or ratioed image
 * can update to include a rule instead of a fixed element class
 */

@mixin aspect-ratio($width, $height, $pad: 0) {
    position: relative;

    &::before {
        display: block;
        content: "";
        width: 100%;
        padding-top: round( ($height / $width) * 100% );
    }

    .inner {
        position: absolute;
        top: 0;
        left: $pad;
        right: $pad;
        bottom: 0;
    }
}

/**
 * bit dirty gradient venfor prefix edition, probably no longer needed
 * 
 * @parameter #hex $color
 * @parameter int $amount
 * 
 * @return CSS
 */

@mixin gradient-trans-to-color($color, $amount) {
	// background: -moz-linear-gradient(top,  rgba($color,0) 0%, rgba($color,$amount) 100%); /* FF3.6-15 */
	// background: -webkit-linear-gradient(top,  rgba($color,0) 0%,rgba($color,$amount) 100%); /* Chrome10-25,Safari5.1-6 */
	background: linear-gradient(to bottom,  rgba($color,0) 0%,rgba($color,$amount) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
	// filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#a6000000',GradientType=0 ); /* IE6-9 */
}

/**
 * Create styles for animation triggers by range
 * 
 * @parameter int $min [0-100]
 * @parameter int $max [0-100]
 * 
 * @return CSS
 */

@mixin animate-in-range($min, $max){
	@for $i from $min through $max {
		&[data-percent="#{$i}"]{
			@content;
		}
	}
}

/**
 * Create an pseudo element that masks the content
 * Container must not be position: static|initial|(inherit)
 * 
 * @return CSS
 */

@mixin animation-reveal-after-panel(){
	overflow: hidden; // insure element has overflow hidden so doesnt push out on any non overflow hidden blocks(for hero anim)

    &::after {
        position: absolute;
        content: '';
        width: 200%;
		height: 200%;
		min-width: 200vw;
		min-height: 200vh;
        top: -50%;
        left: -50%;
        opacity: 1;
        z-index: $z-index-low;
        transform: rotate(36deg) translate(0%, 0%);
        transition: all $long-animation-length ease-in-out 0s;
        pointer-events: none;
    }
}

/**
 * Create min-width media query
 * 
 * @parameter Px $width
 * 
 * @return CSS
 */

@mixin media-min-width($width) {
    @media screen and (min-width: $width) {
        @content;
    }
}

/**
 * Create range (min-width, max-width) media query 
 * 
 * @parameter Px $min-width
 * @parameter Px $max-width
 * 
 * @return CSS
 */

@mixin media-range-width($min-width, $max-width) {
    @media screen and (min-width: $min-width) and (max-width: $max-width) {
        @content;
    }
}

/**
 * Create max-width media query
 * 
 * @parameter Px $width
 * 
 * @return CSS
 */

@mixin media-max-width($width) {
    @media screen and (max-width: $width) {
        @content;
    }
}

/**
 * Animate item transition
 */

@mixin animate-item-transition() {
    transition: transform $animation-length ease $no-animation-length,
        opacity $animation-length ease $no-animation-length;
 }

/**
 * Create a clip-path with a transparent circle in the middle
 * 
 * @parameter Percentage $radius Circle radius in percentage (between 0% and 50%)
 * 
 * @return CSS
 */

@mixin clip-path-circle-frame($radius) {
    clip-path: polygon(
        0% 0%,
        0% 100%,
        50% 100%,
        50% #{50% + $radius},
        #{50% + calc((37 - 50) / 50) * $radius} #{50% + calc((98 - 50) / 50) * $radius},
        #{50% + calc((25 - 50) / 50) * $radius} #{50% + calc((93 - 50) / 50) * $radius},
        #{50% + calc((15 - 50) / 50) * $radius} #{50% + calc((85 - 50) / 50) * $radius},
        #{50% + calc((7 - 50) / 50) * $radius} #{50% + calc((75 - 50) / 50) * $radius},
        #{50% + calc((2 - 50) / 50) * $radius} #{50% + calc((63 - 50) / 50) * $radius},
        #{50% + calc((0.75 - 50) / 50) * $radius} #{50% + calc((58 - 50) / 50) * $radius},
        #{50% + calc((0.25 - 50) / 50) * $radius} #{50% + calc((54 - 50) / 50) * $radius},
        #{50% + calc((0 - 50) / 50) * $radius} 50%,
        #{50% + calc((0.25 - 50) / 50) * $radius} #{50% + calc((46 - 50) / 50) * $radius},
        #{50% + calc((0.75 - 50) / 50) * $radius} #{50% + calc((42 - 50) / 50) * $radius},
        #{50% + calc((2 - 50) / 50) * $radius} #{50% + calc((37 - 50) / 50) * $radius},
        #{50% + calc((7 - 50) / 50) * $radius} #{50% + calc((25 - 50) / 50) * $radius},
        #{50% + calc((15 - 50) / 50) * $radius} #{50% + calc((15 - 50) / 50) * $radius},
        #{50% + calc((25 - 50) / 50) * $radius} #{50% + calc((7 - 50) / 50) * $radius},
        #{50% + calc((37 - 50) / 50) * $radius} #{50% + calc((2 - 50) / 50) * $radius},
        50% #{50% - $radius},
        #{50% + calc((63 - 50) / 50) * $radius} #{50% + calc((2 - 50) / 50) * $radius},
        #{50% + calc((75 - 50) / 50) * $radius} #{50% + calc((7 - 50) / 50) * $radius},
        #{50% + calc((85 - 50) / 50) * $radius} #{50% + calc((15 - 50) / 50) * $radius},
        #{50% + calc((93 - 50) / 50) * $radius} #{50% + calc((25 - 50) / 50) * $radius},
        #{50% + calc((98 - 50) / 50) * $radius} #{50% + calc((37 - 50) / 50) * $radius},
        #{50% + calc((99.25 - 50) / 50) * $radius} #{50% + calc((42 - 50) / 50) * $radius},
        #{50% + calc((99.75 - 50) / 50) * $radius} #{50% + calc((46 - 50) / 50) * $radius},
        #{50% + calc((100 - 50) / 50) * $radius} 50%,
        #{50% + calc((99.75 - 50) / 50) * $radius} #{50% + calc((54 - 50) / 50) * $radius},
        #{50% + calc((99.25 - 50) / 50) * $radius} #{50% + calc((58 - 50) / 50) * $radius},
        #{50% + calc((98 - 50) / 50) * $radius} #{50% + calc((63 - 50) / 50) * $radius},
        #{50% + calc((93 - 50) / 50) * $radius} #{50% + calc((75 - 50) / 50) * $radius},
        #{50% + calc((85 - 50) / 50) * $radius} #{50% + calc((85 - 50) / 50) * $radius},
        #{50% + calc((75 - 50) / 50) * $radius} #{50% + calc((93 - 50) / 50) * $radius},
        #{50% + calc((63 - 50) / 50) * $radius} #{50% + calc((98 - 50) / 50) * $radius},
        50% #{50% + $radius},
        50% 100%,
        100% 100%,
        100% 0
    );

    /*
This is the base model for the formula from above
clip-path: polygon(
    0% 0%,
    0% 100%,
    50% 100%,
    37% 98%,
    25% 93%,
    15% 85%,
    7% 75%,
    2% 63%,
    0.75% 58%,
    0.25% 54%,
    0% 50%,
    0.25% 46%,
    0.75% 42%,
    2% 37%,
    7% 25%,
    15% 15%,
    25% 7%,
    37% 2%,
    50% 0%,
    63% 2%,
    75% 7%,
    85% 15%,
    93% 25%,
    98% 37%,
    99.25% 42%,
    99.75% 46%,
    100% 50%,
    99.75% 54%,
    99.25% 58%,
    98% 63%,
    93% 75%,
    85% 85%,
    75% 93%,
    63% 98%,
    50% 100%,
    100% 100%,
    100% 0%
    );
*/
}

/**
 * Take a scale size and return value
 * 
 * @parameter $image-size = small, medium, large
 * 
 * @return value
 */

@function return-scale-amount($image-size){
    $scale: map-get((
        small : 1.03,
        medium : 1.05,
        large : 1.08
    ), $image-size);

    @return $scale;
}

/**
 * Take a scale size and return duration
 * 
 * @parameter $image-size = small, medium, large
 * 
 * @return value
 */

@function return-scale-animation-duration($image-size){
    $duration: map-get((
        small : $animation-length,
        medium : $long-animation-length,
        large : 2s
    ), $image-size);

    @return $duration;
}

/**
 * Force consistant animation style for scale
 * animation
 * 
 * @return CSS
 */

@mixin scale-animation-transition($image-size){
    $duration: return-scale-animation-duration($image-size);

    transition: transform $long-animation-length ease-out;
}

/**
 * Animate image, requires picture element insde of container
 * 
 * @parameter $image-size = small, medium, large
 * 
 * @return CSS
 */

@mixin image-hover-animation($image-size){
    $scale: return-scale-amount($image-size);

    picture {
        overflow: hidden;

        img {
            backface-visibility: hidden;
            transform: scale(1);

            @include scale-animation-transition($image-size);
        }
    }  

    @include media-min-width($media-query-tablet) {
        &:hover {
            picture {
                img {
                    transform: scale(#{$scale});
                }
            }
        }
    }
}

/**
 * Create empty stylesheets DEPRECATED
 * 
 * @parameter Px $width Array
 * 
 * @return CSS
 */

@mixin create-block-stylesheets($breakpoints){
    @each $breakpoint in $breakpoints {
        @include media-min-width($breakpoint){
            display: block;
        }
    }
}

/**
 * Return relative pixel size based on max width of template
 * 
 * @parameter Int $size
 * 
 * @return value [x]vw
 */

@function relative-pixel-size-to-fhd($size){
    @return calc((#{$size} / 1920) * 100vw);
}

/**
 * Alias for relative-pixel-size-to-fhd
 * 
 * @parameter Int $size
 * 
 * @return value [x]vw
 */

@function rpsfhd($size){
    @return relative-pixel-size-to-fhd($size);
}

/**
 * Take num columns and return column size based on screen width
 * 
 * @parameter Int $cols
 * 
 * @return value [x]vw
 */

@function return-column-width($cols){
	@return calc( ( (100vw - 40px) / 12 ) * #{$cols});
}

/**
 * alias for return-column-width
 * 
 * @parameter Int $cols
 * 
 * @return value [x]vw
 */

@function lh-cols($cols){
	@return return-column-width($cols);
}

/**
 * Replace '#' with the URL encoded value
 * 
 * @parameter String $string
 * 
 * @return String
 */
@function lh-encode-color($string) {
	@if type-of($string) == 'color' {
        $hex: str-slice(ie-hex-str($string), 4);
        $string: unquote("#{$hex}");
    }

    $string: '%23' + $string;

	@return $string;
}

/**
 * Set background image to be an left arrow of a desired colour
 * 
 * @parameter HexColour $color
 * 
 * @return CSS
 */
@mixin lh-arrow-left($color) {
    background-image: url('data:image/svg+xml;utf8,<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="arrow-left"><path id="Icon" d="M11.7071 5.29289C12.0976 5.68342 12.0976 6.31658 11.7071 6.70711L7.41421 11H19C19.5523 11 20 11.4477 20 12C20 12.5523 19.5523 13 19 13H7.41421L11.7071 17.2929C12.0976 17.6834 12.0976 18.3166 11.7071 18.7071C11.3166 19.0976 10.6834 19.0976 10.2929 18.7071L4.29289 12.7071C4.10536 12.5196 4 12.2652 4 12C4 11.7348 4.10536 11.4804 4.29289 11.2929L10.2929 5.29289C10.6834 4.90237 11.3166 4.90237 11.7071 5.29289Z" fill="#{$color}"/></g></svg>');
}

/**
 * Set background image to be an right arrow of a desired colour
 * 
 * @parameter HexColour $color
 * 
 * @return CSS
 */
@mixin lh-arrow-right($color) {
    background-image: url('data:image/svg+xml;utf8,<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="arrow-right"><path id="Icon" d="M10.2441 4.41076C10.5695 4.08533 11.0971 4.08533 11.4226 4.41076L16.4226 9.41077C16.5788 9.56705 16.6666 9.77901 16.6666 10C16.6666 10.221 16.5788 10.433 16.4226 10.5893L11.4226 15.5893C11.0971 15.9147 10.5695 15.9147 10.2441 15.5893C9.91862 15.2638 9.91862 14.7362 10.2441 14.4108L13.8215 10.8334L4.16665 10.8334C3.70641 10.8334 3.33331 10.4603 3.33331 10C3.33331 9.53978 3.70641 9.16669 4.16665 9.16669L13.8215 9.16669L10.2441 5.58928C9.91862 5.26384 9.91862 4.7362 10.2441 4.41076Z" fill="#{$color}"/></g></svg>');
}

/**
 * Set background image to be an long right arrow of a desired colour
 * 
 * @parameter HexColour $color
 * 
 * @return CSS
 */
@mixin lh-arrow-long-right($color) {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="28" height="12" viewBox="0 0 28 12" fill="none"><path d="M21.2438 0.410704C21.5692 0.0852667 22.0968 0.0852668 22.4223 0.410704L27.4223 5.41071C27.5785 5.56699 27.6663 5.77895 27.6663 5.99996C27.6663 6.22097 27.5785 6.43294 27.4223 6.58922L22.4223 11.5892C22.0968 11.9147 21.5692 11.9147 21.2438 11.5892C20.9183 11.2638 20.9183 10.7361 21.2438 10.4107L24.8212 6.83329L1.16634 6.83329C0.706104 6.83329 0.333008 6.4602 0.333008 5.99996C0.333008 5.53972 0.706104 5.16663 1.16634 5.16663L24.8212 5.16663L21.2438 1.58922C20.9183 1.26378 20.9183 0.736141 21.2438 0.410704Z" fill="#{$color}"/></svg>');
}

/**
 * Set background image to be an long right arrow of a desired colour
 * 
 * @parameter HexColour $color
 * 
 * @return CSS
 */
 @mixin lh-carousel-arrow-right($color) {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="73" height="52" viewBox="0 0 73 52" fill="none"><path d="M47.2563 20.2511C47.598 19.9163 48.152 19.9163 48.4937 20.2511L53.7437 25.3939C53.9078 25.5547 54 25.7727 54 26C54 26.2273 53.9078 26.4453 53.7437 26.6061L48.4937 31.7489C48.152 32.0837 47.598 32.0837 47.2563 31.7489C46.9146 31.4142 46.9146 30.8715 47.2563 30.5368L51.0126 26.8571L19.875 26.8571C19.3918 26.8571 19 26.4734 19 26C19 25.5266 19.3918 25.1429 19.875 25.1429L51.0126 25.1429L47.2563 21.4632C46.9146 21.1285 46.9146 20.5858 47.2563 20.2511Z" fill="#{$color}"/></svg>');
 }